{"name":"Middleman.js","tagline":"A small library that lets you inject some code between a third party library and the execution context.","body":"With **Middleman.js** you can easily:\r\n\r\n* filter arguments passed to an original method,\r\n* pass one function's arguments to another function, or\r\n* overload a third party method to change how it works\r\n\r\n## Links\r\n* [Development version 0.1.0](https://github.com/zumba/middleman.js/blob/master/dist/middleman-0.1.0.js) **2.27kb** Uncompressed\r\n* [Production version 0.1.0](https://github.com/zumba/middleman.js/blob/master/dist/middleman-0.1.0.min.js) **0.6kb** Minified\r\n* [Unit tests](https://github.com/zumba/middleman.js/blob/master/test/spec/middleman.spec.js)\r\n\r\n## Example\r\nLet's say you add a third party library to your application that has a method called `doSomethingCool`.\r\n```javascript\r\n    var ThirdPartyLibrary = {\r\n        doSomethingCool : function(firstParam, isAwesome) {\r\n            // do something cool with firstParam, then:\r\n            if (isAwesome){\r\n                console.log('All up in your app, doing awesome things.');\r\n            }\r\n        };\r\n    };\r\n```\r\n\r\nYou decide that you want to force the second parameter `isAwesome` to be `true` every time\r\n`doSomethingCool` is called because your application is totally awesome.  You *could* just write a\r\nwrapper method like this:\r\n```javascript\r\n    var AwesomeApplication = {\r\n        doSomethingCool : function(firstParam) {\r\n            return ThirdPartyLibrary.doSomethingCool(firstParam, true);\r\n        }\r\n    };\r\n\r\n    AwesomeApplication.doSomethingCool('blah blah blah');\r\n    /**\r\n     * console: All up in your app, doing awesome things.\r\n     */\r\n```\r\n\r\nHowever, now you have to remember to call your method instead of the original method.\r\nWhat if `ThirdPartyLibrary` is very popular (e.g. jQuery)?  Your colleague Tony has been using\r\n`ThirdPartyLibrary` for years.  He doesn't remember to use your wrapper function when writing new\r\ncode for your application.\r\n\r\n**Middlman.js** gets between Tony and `ThirdPartyLibrary`, so your application stays awesome. :expressionless:\r\n```javascript\r\n    var MM = new Middleman();\r\n\r\n    MM.map({\r\n        lib : ThirdPartyLibrary,\r\n        method : 'doSomethingCool',\r\n        filter : function(args) {\r\n            // make the second parameter true\r\n            args[1] = true;\r\n            return args;\r\n        }\r\n    });\r\n\r\n    ThirdPartyLibrary.doSomethingCool(\"I'm Tony, and the second param is undefined.\");\r\n    /**\r\n     * console: All up in your app, doing awesome things.\r\n     */\r\n```\r\n\r\nPiece of cake.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}